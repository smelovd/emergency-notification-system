version: '3'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: "zookeeper"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: nc -z localhost 2181 || exit -1
      interval: 10s
      timeout: 15s
      retries: 5
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: "kafka"
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: [ "CMD", "kafka-topics", "--bootstrap-server", "kafka:9092", "--list" ]
      interval: 10s
      timeout: 15s
      retries: 5
  mongodb:
    image: mongo:4.4.6
    command: --replSet rs0
    container_name: "mongodb"
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_DATABASE: attachment-api-local-dev
    healthcheck:
      test: echo 'db.runCommand("ping").ok'| mongo localhost:27017/test --quiet
      interval: 10s
      timeout: 15s
      retries: 5
  mongo-init:
    image: mongo:4.4.6
    restart: "no"
    depends_on:
      mongodb:
        condition: service_healthy
    command: >
      mongo --host mongodb:27017 --eval
      '
      rs.initiate( {
        _id : "rs0",
        members: [
          { _id: 0, host: "localhost:27017" }
          ]
      })
      '
  redis:
    image: redis:latest
    container_name: "redis"
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 5s
      timeout: 10s
      retries: 5
  api:
    build:
      context: api
      dockerfile: Dockerfile
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_healthy
    volumes:
      - ./requests:/requests
    ports:
      - "8080:8080"
    links:
      - mongodb
      - kafka
  worker:
    build:
      context: worker
      dockerfile: Dockerfile
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    links:
      - redis
      - mongodb
      - kafka
  checker:
    build:
      context: checker
      dockerfile: Dockerfile
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_healthy
    volumes:
      - ./requests:/requests
    links:
      - mongodb
      - kafka
  test-endpoint:
    build:
      context: test_endpoint
      dockerfile: Dockerfile
    #    deploy:
    #      replicas: 2
  test-endpoint-nginx:
    image: nginx:latest
    volumes:
      - ./test-endpoint-nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - test-endpoint
    ports:
      - "80:80"